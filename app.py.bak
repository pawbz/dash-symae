# -*- coding: utf-8 -*-
import base64
import io
import dash
import dash_html_components as html
import dash_bootstrap_components as dbc
import plotly.graph_objs as go
import pandas as pd
import random
import json
import dash_daq as daq
import tensorflow as tf
import plotly.io as pio
from flask_caching importmedium1
from dash.dependencies import Input, Output, State
from scipy import stats

import plotly
print(plotly.__version__)


group_colors = {"control": "light blue", "reference": "red"}

app = dash.Dash(
    __name__, meta_tags=[{"name": "viewport", "content": "width=device-width"}],
    external_scripts=['https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.4/MathJax.js?config=TeX-MML-AM_CHTML',]
)
server = app.server


card_content = [
    dbc.CardHeader("Card header"),
    dbc.CardBody(
        [
            html.H5("Card title", className="card-title"),
            html.P(
                "This is some card content that we'll reuse",
                className="card-text",
            ),
        ]
    ),
]

row_3 = dbc.Row(
    [
        dbc.Col(dbc.Card(card_content, color="light", outline=True)),
        dbc.Col(dbc.Card(card_content, color="dark", outline=True)),
    ]
)



PATH = pathlib.Path(__file__).parent
DATA_PATH = PATH.joinpath("data").resolve()

with open(PATH.joinpath("demo_description.md"), "r") as file:
    demo_description_md = file.read()

default_study_data = pd.read_csv(DATA_PATH.joinpath("study.csv"))

data={}
expts=["planewave_marm"]
for expt in expts:
    DATA_PATH= PATH.joinpath(expt).resolve()
    mh5=h5py.File(DATA_PATH.joinpath("medium.h5"), 'r')
    m={}
    for key in mh5.keys():
        m[key]=np.array(mh5[key])
    X=h5py.File(DATA_PATH.joinpath("train_data.h5"), 'r')
    Xot=np.array(X["data"][:,:,:,:,:])
    labels=X["labels"][:]
    labelindices={'base0': [], 'moni1' : [], 'moni2' : []}
    for (i,label) in enumerate(labels):
        labelindices[label[0][0]].append(i)

    encoderr=tf.keras.models.load_model(DATA_PATH.joinpath("_TFencoderr"), compile=False)
    encodertau=tf.keras.models.load_model(DATA_PATH.joinpath("_TFencodertau"), compile=False)
    decoder=tf.keras.models.load_model(DATA_PATH.joinpath("_TFdecoder"), compile=False)

    data[expt] = {
    'Xot': Xot, 'm': m, 'labels': labels, 'labelindices': labelindices, 
    'encoderr': encoderr, 
    'encodertau': encodertau, 
    'decoder': decoder
    }
#





# App Layout
app.layout = html.Div(
    children=[
        # Error Message
        html.Div(id="error-message"),
        # Top Banner
        html.Div(
            className="study-browser-banner row",
            children=[
                html.H2(className="h2-title", children="SymAE"),
                html.Div(
                    className="div-logo",
                    children=html.Img(
                        className="logo", src=app.get_asset_url("dash-logo-new.png")
                    ),
                ),
                html.H2(className="h2-title-mobile", children="SymAE"),
            ],
        ),
        # Body of the App
        html.Div(
            className="row app-body",
            children=[
                # User Controls
                html.Div(
                    className="four columns card",
                    children=[
                        html.Div(
                            className="bg-white user-control",
                            children=[
                                dcc.Tabs(id='clustergram-tabs', value='what-is', children=[
                                    dcc.Tab(
                                        label="What is SymAE?",
                                    children=[
                                        dcc.Markdown(demo_description_md),
                                        # dcc.Dropdown(id="study-dropdown"),
                                    ],
                                ),
                                dcc.Tab(
                                    label="Medium",
                                    children=
                                html.Div(
                                    className="padding-top-bot",
                                    children=[
                                        html.H6("Choose the type of plot"),
                                        dcc.Dropdown(
                                        id="expt_name",
                                        searchable=False,
                                        clearable=False,
                                        options=[
                                            {
                                                "label": "Marmousi Example I",
                                                "value": "planewave_marm",
                                            },
                                            {
                                                "label": "Marmousi Example II",
                                                "value": "twitter_3000",
                                            },
                                            {
                                                "label": "Simple Expanding Perturbation I",
                                                "value": "simple1",
                                            },
                                            {
                                                "label": "Simple Expanding Perturbation II",
                                                "value": "simple2",
                                            },
                                        ],
                                        placeholder="Select a dataset",
                                        value="planewave_marm",
                                    ),
                                    NamedSlider(
                                        name="Baseline Medium",
                                        short="medium1",
                                        min=0,
                                        max=2,
                                        step=None,
                                        val=0,
                                        marks={
                                            0: '0',
                                            1: '1',
                                            2: '2' 
                                        },
                                    ),
                                    dcc.Graph(id="fig_medium1", style={"height": "25vh", "width": "40vh"},),
                                    NamedSlider(
                                        name="Monitor Medium",
                                        short="medium2",
                                        min=0,
                                        max=2,
                                        step=None,
                                        val=2,
                                        marks={
                                            0: '0',
                                            1: '1',
                                            2: '2' 
                                        },
                                    ),
                                    dcc.Graph(id="fig_medium2", style={"height": "25vh", "width": "40vh"},)
                                    ],
                                ),
                                ),
                                dcc.Tab(
                                    label="Plotting",
                                    children=
                                html.Div(
                                    className="padding-top-bot",
                                    children=[
                                    html.Div(
                                        [
                            # daq.ToggleSwitch(id='toggle_hat_i', value=False,label='My toggle switch', labelPosition='right'),
                            # daq.ToggleSwitch(id='toggle_hat_j', value=False,label='My toggle switch',labelPosition='right'),
                                html.P(
                                    "Click to change colorscale", className="subheader"
                                ),
                                
                                        ]),
                                        html.H6("CSV File"),
                                        dcc.Upload(
                                            id="upload-data",
                                            className="upload",
                                            children=html.Div(
                                                children=[
                                                    html.P("Drag and Drop or "),
                                                    html.A("Select Files"),
                                                ]
                                            ),
                                            accept=".csv",
                                        ),
                                    ],
                                ),
                                )])
                            ],
                        )
                    ],
                ),
                # Graph
                html.Div([row_3], 
                    className="eight columns card-left",),
                html.Div(
                    className="eight columns card-left",
                            # className="bg-white",
                    children=[
                        # html.Div(
                            # className="bg-white",
                            # children=
                        html.H4("Baseline Sources"),
                        # html.Div([ dcc.Tabs(id='tabs-example', value='tab-1', children=[ dcc.Tab(label='Tab one', value='tab-1'),
        # dcc.Tab(label='Tab two', value='tab-2'), ])]),
                        html.Div(
                            className="bg-white",
                            children=[
                            style={'width': '30%', 'display': 'inline-block'}),
                                html.Div(className='bg-white',style={ 'background-image': app.get_asset_url('encoder.png'), 'background-repeat': 'no-repeat', 'background-position': 'right top', 
                                'background-size': '500px 500px', 'display': 'inline-block'}),
                        html.Div(
                            className="bg-white",
                        children=[
                        html.H6(latent_instruction),
                        ],
                            style={'width': '25%', 'display': 'inline-block'}),
                        html.Div(
                            className="bg-white",
                        children=[
                            
                            ], 
                            style={'width': '30%', 'display': 'inline-block','textAlign': 'center'}),
                        html.H4("Monitor Sources"),
                        html.Div(
                            className="bg-white",
                            children=[
                            dcc.Graph(id="fig_Xj", style={"height": "28vh", "width": "23vh", 'marginTop': '0em',}), 
                                    html.Div(html.Button('next instance', id='reload_j', n_clicks=1, style={}),),
                                    html.Div(id='div-hidden_j', style={'display': 'none',}),],
                            style={'width': '30%','display': 'inline-block'}),
                        html.Div(
                            className="bg-white",
                        children=[
                            dcc.Graph(id="fig_latent_space2", style={"height": "25vh", "width": "25vh", 'marginTop': '0em',}), 
                            html.H6(latent_instruction),
                        ],
                            style={'width': '25%', 'display': 'inline-block'}),
                        html.Div(
                            className="bg-white",
                        children=[
                            dcc.Graph(id="fig_Xjhat", style={"height": "28vh", "width": "23vh", 'marginTop': '0em',}), 
                                dcc.RadioItems(
                                            id="toggle_hat_j",
                                            options=[
                                                {"label": r'$\hat{X}$', "value": "HAT"},
                                                {"label": r'$\hat{X}-{X}$', "value": "DIFF", },
                                            ],
                                            value="HAT",
                                            style={'marginRight': '10em'},
                                            labelStyle={
                                                "display": "inline-block",
                                                "padding": "12px 12px 12px 0px",
                                            },
                                        ),
                        ],
                            style={'width': '30%', 'display': 'inline-block','textAlign': 'center'})
                    ],
                ),
                dcc.Store(id="error", storage_type="memory"),
            ],
        ),
    ]
)


def generate_medium(epsilon,expt):
    eps=["base0", "moni1", "moni2"][epsilon]
    m0=data[expt]['m'][eps]
    return px.imshow(m0.transpose(),  color_continuous_scale='Viridis')
                # labels=dict(x="Day of Week", y="Time of Day", color="Productivity"),
                # x=['Monday', 'Thursday', 'Friday'],
                # y=['Morning', 'Afternoon', 'Evening']

def generate_gather(d,cs):
    fig=px.imshow(d.transpose(), aspect="auto", range_color=[-3,3], color_continuous_scale=cs)
    fig.update_yaxes(title='time')
    fig.update_xaxes(title='receiver')
    return fig




@app.callback(
        Output("fig_medium1", "figure"),
        [
            Input("slider-medium1", "value"),
            Input("expt_name", "value"),
        ],
)
def update_baseline(epsilon,expt):
    return generate_medium(epsilon,expt)

@app.callback(
        Output("fig_medium2", "figure"),
        [
            Input("slider-medium2", "value"),
            Input("expt_name", "value"),
        ],
)
def update_monitor(epsilon,expt):
    return generate_medium(epsilon,expt)

@app.callback(
        Output("div-hidden_i", "children"),
        [
            Input("reload_i", "n_clicks"),
            Input("slider-medium1", "value"),
            Input("expt_name", "value"),
        ],
)
def load_Xi(dummy,epsilon,expt):
    eps=["base0", "moni1", "moni2"][epsilon]
    return random.choice(data[expt]["labelindices"][eps])

@app.callback(
        Output("div-hidden_j", "children"),
        [
            Input("reload_j", "n_clicks"),
            Input("slider-medium2", "value"),
            Input("expt_name", "value"),
        ],
)
def load_Xj(dummy,epsilon,expt):
    eps=["base0", "moni1", "moni2"][epsilon]
    return random.choice(data[expt]["labelindices"][eps])

def reconstruct(i,j,expt,toggle,hybrid_flag):
    x=data[expt]["Xot"][[i,j]]
    zr=data[expt]["encoderr"].predict(x)
    ztau=data[expt]["encodertau"].predict(x)
    if(hybrid_flag):
        zr=np.flip(zr, axis=[0]);
    z=tf.concat([zr, ztau],1)
    xhat=data[expt]["decoder"].predict(z)
    if (toggle=="DIFF"):
        x=x[0,0,:,:,0]
        xhat=xhat[0,0,:,:,0]-x
    else:
        xhat=xhat[0,0,:,:,0]

    return xhat
 



@app.callback(
        Output("fig_Xi", "figure"),
        [
            Input("div-hidden_i", "children"),
            Input("expt_name", "value"),
            Input("colorscale-picker", "colorscale"),
        ],
)
def plot_Xi(i,expt,cs):
    d=data[expt]["Xot"][i,0,:,:,0]
    return generate_gather(d,cs)

@app.callback(
        Output("fig_Xihat", "figure"),
        [
            Input("div-hidden_i", "children"),
            Input("div-hidden_j", "children"),
            Input("expt_name", "value"),
            Input("colorscale-picker", "colorscale"),
            Input("toggle_hat_i", "value"),
            Input('fig_latent_space1', 'hoverData'),
        ],
)
def plot_Xihat(i,j,expt,cs,toggle,hoverData):
    hybrid_flag=True
    if(hoverData == None):
        hybrid_flag=False
    elif((hoverData['points'][0]['x']==hoverData['points'][0]['y'])):
        hybrid_flag=False
    return generate_gather(reconstruct(i,j,expt,toggle,hybrid_flag),cs)


 
@app.callback(
        Output("fig_Xj", "figure"),
        [
            Input("div-hidden_j", "children"),
            Input("expt_name", "value"),
            Input("colorscale-picker", "colorscale"),
        ],
)
def plot_Xj(j,expt,cs):
    d=data[expt]["Xot"][j,0,:,:,0]
    return generate_gather(d,cs)

@app.callback(
        Output("fig_Xjhat", "figure"),
        [
            Input("div-hidden_i", "children"),
            Input("div-hidden_j", "children"),
            Input("expt_name", "value"),
            Input("colorscale-picker", "colorscale"),
            Input("toggle_hat_j", "value"),
            Input('fig_latent_space2', 'hoverData'),
        ],
)
def plot_Xjhat(i,j,expt,cs,toggle,hoverData):
    hybrid_flag=True
    if(hoverData == None):
        hybrid_flag=False
    elif(hoverData['points'][0]['x']==hoverData['points'][0]['y']):
        hybrid_flag=False
    return generate_gather(reconstruct(j,i,expt,toggle,hybrid_flag),cs)
 

def latent_scatter(m1,m2, ticktext):
    hoverlabels = ["Observed Instance", "Hybrid Instance"]
    fig=px.scatter(x=[m1,m1], y=[m1,m2], range_x=[-1,3], range_y=[-1,3], hover_name=hoverlabels)
    fig.update_xaxes(title="source effects")
    fig.update_yaxes(title="path effects")
    fig.update_layout(title="SymAE's Latent Space")
    fig.update_layout(xaxis=dict(tickmode='array', tickvals=[m1,m2],ticktext=ticktext),hovermode='closest')
    fig.update_layout(yaxis=dict(tickmode='array', tickvals=[m1,m2],ticktext=ticktext))
    fig.update_traces(marker=dict(size=20,symbol=["diamond", "bowtie"], color="blue", line_color="black"))
    # fig.update_traces(hovertemplate='GDP: %{customdata}')
    return fig

@app.callback(
         Output("fig_latent_space1", "figure"),
         [
            Input("slider-medium1", "value"),
            Input("slider-medium2", "value"),
         ]
 )
def plot_latent_space1(m1,m2):
    return latent_scatter(m1,m2, ["Baseline", "Monitor"])
 
@app.callback(
         Output("fig_latent_space2", "figure"),
         [
            Input("slider-medium1", "value"),
            Input("slider-medium2", "value"),
         ]
 )
def plot_latent_space2(m2,m1):
    return latent_scatter(m1,m2, ["Monitor", "Baseline"])
 
 

if __name__ == "__main__":
    app.run_server(debug=True)
